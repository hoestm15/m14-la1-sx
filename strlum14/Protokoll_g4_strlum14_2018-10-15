
#Protokoll: REST-Server
Name: Strauß Lukas 
Klasse: 5AHME  
Gruppe: 4  
Anwesend: Strauß,Strutz,Tuttner,Uhl,Waltl,Wieser,Zitz
Abwesend: niemand

  
# Wie wird in der Automatisierungstechnik kommuniziert ?  

Will man Daten von einem Feldgerät oder einer SPS über eine weitere Entfernung übertragen, geschah das meißt mit einem
Feldbus(Modbus,Kenbus) und einem Netzwerk oder mit einer seriellen Schnittstelle. Das bringt aber einige Probleme,
wie zb. die Notwendigkeit von zusätzlicher Hardware mitsich. Die Grafik soll zeigen,wie dieser Vorgang aussieht.



 Besser funktioniert es wenn man direkt über das Netzwerk arbeitet. Dass funktioniert über HTTP-Server und HTTP-Client.
 Die meisten werden das HTTP Protokoll vom WWW kennen. Es wird dort verwendet, trotzdem funktioniert es auch, wenn es nicht
  im Zusammenhang mit dem WWW ist. Es ist ein Übertragungsprotokoll, dazu aber weiter unten mehr! Man muss dazu sagen, dass
  Geräte im freien Internet zu verwenden, auch ein Sicherheitsrisiko darstellt.
  
  
#REST-Server     

REST steht für Represential State Transfer und wird in den meisten Fällen für die Maschine zu Maschine Kommunikation in Web-
Services verwendet, mit dem Ziel , einen Architekturstil zu schaffen, das die Anforderungen eines modernen Web besser darstellt.
Als Übertragungsprotokoll wird dabei HTTP verwendet. 

Die wichtigsten Prinzipien sind: --> Zustandslos
                                     Client/Server Prinzio
                                     Caching
                                     Einheitliche Schnitstelle
                                     Mehrschichtige Systeme
                                     (Code on Demand)
                                    
 Die für uns wichtigsten drei sind Zustandslos, Client/Server Prinzip und die einheitliche Schnitstelle.
 
 ## Zustandslos --> 
 jede REST-Nachricht enthält alle Informationen, die für den Server bzw. Client notwendig sind, 
 um die Nachricht zu verstehen. Weder der Server noch die Anwendung soll Zustandsinformationen zwischen zwei Nachrichten 
 speichern. Man spricht daher von einem zustandslosen Protokoll. Jede Anfrage eines Clients an den
 Server ist insofern in sich geschlossen, als sie sämtliche Informationen über den Anwendungszustand beinhaltet, die vom 
 Server für die Verarbeitung der Anfrage benötigt werden. 
 
 ## einheitliche Schnittstelle
 Dies ist das Hauptunterscheidungsmerkmal von allen weiteren Architekturstilen. Dabei besteht diese aus vier weiteren
 Eigenschaften. Ziel ist die Einheitlichkeit der Schnittstelle und somit ihre einfache Nutzung.
 
 
 #HTTP
 
 Der Name HTTP steht für HyperText Transfer Protokoll. HTTP ist ein Protkoll zur Übertragung von Daten auf der
 Anwendungsschicht (Application Layer). Das Protkoll ist zustandslos, dass bedeutet das Informationen aus früheren
 Anforderungen verloren gehen, deshalb ist ein zuverlässiges mitführen von Sitzungsdaten erforderlich. Weiters 
 erfolgt die Übertragung textuell. Um Daten verschlüsselt zu Übertragen gibt es das Protokoll HTTPS.
 
  
 ## Verbindungsaufbau
 
 Vom Client wird ein Request an den Server geschickt und anschließend kommt vom Server ein Response. Gesendet werden in
 beiden Fällen Textnachrichten , wobei beim Response die Textnachrichten auch in komprimierter Form gesendet bzw. empfangen 
 werden können. Grundsätzlich funktioniert der Vorgang auch wenn Server und Client vertauscht sind, das ist in der Praxis
 allerdings selten bis nie der Fall. 
 
 Für den Request stehen folgende Schlüsselwörter zur Verfügung:

* **GET**     -> Inhalte vom Server fordern
* **POST**    -> Übermitteln von Inhalten
* **PUT**     -> Erstellen von neuen Inhalten auf dem Server
* **DELETE**  -> Löschen von Inhalten

Das für uns wichtigste Schlüsselwort ist am Anfang **GET** !

Das Protokoll ist so einfach gehalten, dass man es sogar eigenhändig in der Konsole probieren kann. Neben dem GET-Befehl
sind noch weitere Informationen in der Anfrage nötig. 

Der Paketaufbau eines HTTP-Pakets besteht aus einem Header und einem Body. 
Im Hader befinden sich die wichtigen Infos, die vom Empfänger benötigt werden um die Daten richtig interpretieren zu können
Im Body befinden sich die eigentlichen Daten, also die Daten die auch übertragen werden sollten. 
Diese Daten nennt man Nutzdaten. 
  

#Übung am Computer 
```
luki@luki-htl-vm:~$ nc htl-mechatronik.at 80 -C

HTTP/1.1 400 Bad Request
Date: Sun, 21 Oct 2018 09:48:34 GMT
Server: Apache/2.4.7 (Ubuntu)
Content-Length: 313
Connection: close
Content-Type: text/html; charset=iso-8859-1

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>400 Bad Request</title>
</head><body>
<h1>Bad Request</h1>
<p>Your browser sent a request that this server could not understand.<br />
</p>
<hr>
<address>Apache/2.4.7 (Ubuntu) Server at www.htl-mechatronik.at Port 80</address>
</body></html>
```
Hier wird versucht, mit dem nc-Tool eine Verbindung zu unserem Mechatronik Server aufzubauen. Wie man unschwer 
erkennen kann, ist die Anfrage fehlerhaft. Nun muss eine Verbindung zum Local-Host aufgebaut werden, um herauszufinden,
wie eine korrekte Anfrage aussieht. Das funktioniert mit nc -l 4711 ! 


So würde nun ein korrekter Ablauf aussehen --> 

```   
luki@luki-htl-vm:~$ nc htl-mechatronik.at 80 -C
GET /infotext.html HTTP/1.1
Host: www.htl-mechatronik.at
```  
Bekommt ein Server eine Anfrage von einem Client schickt der Server eine Antwort zum Client zurück.   
Ein Beispiel einer Antwort ist zum Beispiel:  

```
HTTP/1.1 200 OK
Date: Sun, 21 Oct 2018 12:08:05 GMT
Server: Apache/2.4.7 (Ubuntu)
Last-Modified: Tue, 06 Jan 2015 08:13:36 GMT
ETag: "1e9-50bf76235166b"
Accept-Ranges: bytes
Content-Length: 489
Vary: Accept-Encoding
Keep-Alive: timeout=10, max=100
Connection: Keep-Alive
Content-Type: text/html

<html>
<head>
<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=utf->
<title>HTBLA Kaindorf Abteilung Mechatronik - Server Arnfels</title>
<body LANG="de-DE" DIR="LTR">
</head>
<h1>HTBLA Kaindorf<h1>
<h2> Abteilung Mechatronik - Server Arnfels</h2>
<p>
<!--
<IMG SRC="gif/under_construction.gif" NAME="Grafik1" ALIGN=LEFT WIDTH=404 HEIGHT=312 BORDER=0><BR><BR>
-->
<a href="http://www.htl-kaindorf.at/mechatronik">http://www.htl-kaindorf.at/mechatronik</a>
</p>
</body></html>  
```  

##Keep alive: 

Besteht eine Verbindung zwischen Server und dem Client , werden nicht dauerhaft Pakete übertragen.

Um zu verhindern, dass der Server die Verbindung aufgrund einer Überschreitung der Zwit abbricht kann
der Client sogennante Keep-Alive-Pakete schicken um dem Server damit mitzuteilen, dass er immernoch "lebt" und die
Verbindung aufrecht erhalten will. Typische Zeiten für eine Überschreitung sind, je nach Server, zwischen 30 und 120 Sekunden.
Nach dieser Zeit ohne empfangene/gesendete Pakete bricht der Server die Verbindung ab.



